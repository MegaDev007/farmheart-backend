class RealTimeNotifications {
    
    static initialize(io) {
        this.io = io;
        
        // Handle user connections
        io.on('connection', (socket) => {
            // Join user to their personal notification room
            socket.on('join_notifications', (userId) => {
                socket.join(`user_${userId}`);
                logger.info('User joined notifications room:', { userId, socketId: socket.id });
            });

            socket.on('disconnect', () => {
                logger.info('User disconnected from notifications:', { socketId: socket.id });
            });
        });
    }

    static async sendRealTimeNotification(userId, notification) {
        if (this.io) {
            this.io.to(`user_${userId}`).emit('notification', {
                id: notification.id,
                title: notification.title,
                message: notification.message,
                severity: notification.severity,
                createdAt: notification.created_at,
                animalId: notification.animal_id
            });
        }
    }

    static async broadcastSystemNotification(message) {
        if (this.io) {
            this.io.emit('system_notification', {
                title: 'System Notice',
                message,
                severity: 'medium',
                createdAt: new Date()
            });
        }
    }
}

module.exports = RealTimeNotifications;